<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <!-- Thread Group with Eternal Loop and Timer  -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP_PERIOD}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${THREADS_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <!-- This Thread Group is set with certain Loop -->
      <!-- <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">-->
      <!--  <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>-->
      <!--  <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">-->
      <!--    <boolProp name="LoopController.continue_forever">false</boolProp>-->
      <!--    <stringProp name="LoopController.loops">30</stringProp>-->
      <!--  </elementProp>-->
      <!--  <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>-->
      <!--  <stringProp name="ThreadGroup.ramp_time">10</stringProp>-->
      <!--  <boolProp name="ThreadGroup.scheduler">false</boolProp>-->
      <!--  <stringProp name="ThreadGroup.duration">0</stringProp>-->
      <!--  <stringProp name="ThreadGroup.delay">0</stringProp>-->
      <!--  <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>-->
      <!--</ThreadGroup> -->
      
      <!-- Set HTTP Header Here -->
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-api-key</stringProp>
              <stringProp name="Header.value">${API_KEY}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-auth-token</stringProp>
              <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${TARGET_HOST}</stringProp>
          <!--<stringProp name="HTTPSampler.port">${TARGET_PORT}</stringProp>-->
          <stringProp name="HTTPSampler.protocol">${TARGET_PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${TARGET_PATH}</stringProp>
          <!--<stringProp name="HTTPSampler.concurrentPool">4</stringProp>-->
          <!--<stringProp name="HTTPSampler.connect_timeout">5000</stringProp>-->
          <!--<stringProp name="HTTPSampler.response_timeout">30000</stringProp>-->
          <stringProp name="TestPlan.comments">Notice Timeouts: Read to 30s Connect to 5s</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;payload&quot;:{&quot;data&quot;: &quot;SOME_DATA&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${TARGET_HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${TARGET_PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${TARGET_PATH}</stringProp>
          <stringProp name="HTTPSampler.method">${TARGET_METHOD}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;payload&quot;:{&quot;data&quot;: &quot;SOME_DATA&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${TARGET_HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${TARGET_PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${TARGET_PATH}</stringProp>
          <stringProp name="HTTPSampler.method">${TARGET_METHOD}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <!--  ADD Flow Control Action and TIMER HERE -->
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${THREADS_DELAY}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        </hashTree>
        <!-- Set Argument Here which was passed when run jmeter => ${__P([ARG_NAME],[DEFAULT_VAR])} -->
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="TARGET_HOST" elementType="Argument">
              <stringProp name="Argument.name">TARGET_HOST</stringProp>
              <stringProp name="Argument.value">${__P(TARGET_HOST,api.example.com)}</stringProp>
              <stringProp name="Argument.desc">target server domain/IP for testing</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TARGET_PORT" elementType="Argument">
              <stringProp name="Argument.name">TARGET_PORT</stringProp>
              <stringProp name="Argument.value">${__P(TARGET_PORT,443)}</stringProp>
              <stringProp name="Argument.desc">target port on TARGET_HOST for testing</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TARGET_PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">TARGET_PROTOCOL</stringProp>
              <stringProp name="Argument.value">${__P(TARGET_PROTOCOL,https)}</stringProp>
              <stringProp name="Argument.desc">target protocol on TARGET_HOST for testing</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TARGET_PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">TARGET_METHOD</stringProp>
              <stringProp name="Argument.value">${__P(TARGET_METHOD,PUT)}</stringProp>
              <stringProp name="Argument.desc">target method on TARGET_HOST for testing</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTH_TOKEN" elementType="Argument">
              <stringProp name="Argument.name">API_KEY</stringProp>
              <stringProp name="Argument.value">${__P(API_KEY,None)}</stringProp>
              <stringProp name="Argument.desc">API Key for service server</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
              <elementProp name="AUTH_TOKEN" elementType="Argument">
              <stringProp name="Argument.name">AUTH_TOKEN</stringProp>
              <stringProp name="Argument.value">${__P(AUTH_TOKEN,None)}</stringProp>
              <stringProp name="Argument.desc">authentication token for service server</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TARGET_PATH" elementType="Argument">
              <stringProp name="Argument.name">TARGET_PATH</stringProp>
              <stringProp name="Argument.value">${__P(TARGET_PATH,/some/path/here)}</stringProp>
              <stringProp name="Argument.desc">target path on target server</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="THREADS" elementType="Argument">
              <stringProp name="Argument.name">THREADS</stringProp>
              <stringProp name="Argument.value">${__P(THREADS,150)}</stringProp>
              <stringProp name="Argument.desc">Number of concurrent threads</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RAMP_UP_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP_PERIOD</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP_PERIOD,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Ramp up period for each Thread</stringProp>
          </elementProp>
          <elementProp name="THREADS_DURATION" elementType="Argument">
            <stringProp name="Argument.name">THREADS_DURATION</stringProp>
            <stringProp name="Argument.value">${__P(THREADS_DURATION,1800)}</stringProp>
            <stringProp name="Argument.desc">Duration of each Thread</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS_DELAY" elementType="Argument">
            <stringProp name="Argument.name">THREADS_DELAY</stringProp>
            <stringProp name="Argument.value">${__P(THREADS_DELAY,3000)}</stringProp>
            <stringProp name="Argument.desc">Delay of each Thread(Constant Timer) - Pause during delay time</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Example using UDV for symbolic names test target and response to test</stringProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">./test-plan-summary</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">For scripting only</stringProp>
        <stringProp name="filename">./test-plan-log.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
